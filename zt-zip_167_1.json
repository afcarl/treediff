{
  "script": [
    [
      "delete",
      {
        "col": 61,
        "line": 100,
        "offset": 4434
      },
      {
        "col": 70,
        "line": 100,
        "offset": 4443
      }
    ],
    [
      "add",
      {
        "col": 57,
        "line": 100,
        "offset": 4430
      },
      {
        "col": 66,
        "line": 100,
        "offset": 4439
      }
    ],
    [
      "add",
      {
        "col": 67,
        "line": 100,
        "offset": 4440
      },
      {
        "col": 74,
        "line": 100,
        "offset": 4447
      }
    ]
  ],
  "src_after": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n * \n *      http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.zeroturnaround.zip.commons;\n\nimport java.io.File;\n\n/**\n * This is a class that has been made significantly smaller (deleted a bunch of methods) and originally\n * is from the Apache commons-io package. All license and other documentation is intact.\n * \n * General filename and filepath manipulation utilities.\n * <p>\n * When dealing with filenames you can hit problems when moving from a Windows based development machine to a Unix based production machine. This class aims to help avoid those\n * problems.\n * <p>\n * <b>NOTE</b>: You may be able to avoid using this class entirely simply by using JDK {@link java.io.File File} objects and the two argument constructor\n * {@link java.io.File#File(java.io.File, java.lang.String) File(File,String)}.\n * <p>\n * Most methods on this class are designed to work the same on both Unix and Windows. Those that don't include 'System', 'Unix' or 'Windows' in their name.\n * <p>\n * Most methods recognise both separators (forward and back), and both sets of prefixes. See the javadoc of each method for details.\n * <p>\n * This class defines six components within a filename (example C:\\dev\\project\\file.txt):\n * <ul>\n * <li>the prefix - C:\\</li>\n * <li>the path - dev\\project\\</li>\n * <li>the full path - C:\\dev\\project\\</li>\n * <li>the name - file.txt</li>\n * <li>the base name - file</li>\n * <li>the extension - txt</li>\n * </ul>\n * Note that this class works best if directory filenames end with a separator. If you omit the last separator, it is impossible to determine if the filename corresponds to a file\n * or a directory. As a result, we have chosen to say it corresponds to a file.\n * <p>\n * This class only supports Unix and Windows style names. Prefixes are matched as follows:\n * \n * <pre>\n * Windows:\n * a\\b\\c.txt           --&gt; \"\"          --&gt; relative\n * \\a\\b\\c.txt          --&gt; \"\\\"         --&gt; current drive absolute\n * C:a\\b\\c.txt         --&gt; \"C:\"        --&gt; drive relative\n * C:\\a\\b\\c.txt        --&gt; \"C:\\\"       --&gt; absolute\n * \\\\server\\a\\b\\c.txt  --&gt; \"\\\\server\\\" --&gt; UNC\n * \n * Unix:\n * a/b/c.txt           --&gt; \"\"          --&gt; relative\n * /a/b/c.txt          --&gt; \"/\"         --&gt; absolute\n * ~/a/b/c.txt         --&gt; \"~/\"        --&gt; current user\n * ~                   --&gt; \"~/\"        --&gt; current user (slash added)\n * ~user/a/b/c.txt     --&gt; \"~user/\"    --&gt; named user\n * ~user               --&gt; \"~user/\"    --&gt; named user (slash added)\n * </pre>\n * \n * Both prefix styles are matched always, irrespective of the machine that you are currently running on.\n * <p>\n * Origin of code: Excalibur, Alexandria, Tomcat, Commons-Utils.\n *\n * @author <a href=\"mailto:burton@relativity.yi.org\">Kevin A. Burton</A>\n * @author <a href=\"mailto:sanders@apache.org\">Scott Sanders</a>\n * @author <a href=\"mailto:dlr@finemaltcoding.com\">Daniel Rall</a>\n * @author <a href=\"mailto:Christoph.Reck@dlr.de\">Christoph.Reck</a>\n * @author <a href=\"mailto:peter@apache.org\">Peter Donald</a>\n * @author <a href=\"mailto:jefft@apache.org\">Jeff Turner</a>\n * @author Matthew Hawthorne\n * @author Martin Cooper\n * @author <a href=\"mailto:jeremias@apache.org\">Jeremias Maerki</a>\n * @author Stephen Colebourne\n * @version $Id: FilenameUtils.java 609870 2008-01-08 04:46:26Z niallp $\n * @since Commons IO 1.1\n */\npublic class FilenameUtils {\n\n  /**\n   * The extension separator character.\n   * \n   * @since Commons IO 1.4\n   */\n  public static final char EXTENSION_SEPARATOR = '.';\n\n  /**\n   * The extension separator String.\n   * \n   * @since Commons IO 1.4\n   */\n  public static final String EXTENSION_SEPARATOR_STR = (Character.valueOf(EXTENSION_SEPARATOR)).toString();\n\n  /**\n   * The Unix separator character.\n   */\n  private static final char UNIX_SEPARATOR = '/';\n\n  /**\n   * The Windows separator character.\n   */\n  private static final char WINDOWS_SEPARATOR = '\\\\';\n\n  /**\n   * The system separator character.\n   */\n  private static final char SYSTEM_SEPARATOR = File.separatorChar;\n\n  /**\n   * Instances should NOT be constructed in standard programming.\n   */\n  public FilenameUtils() {\n    super();\n  }\n\n  // -----------------------------------------------------------------------\n  /**\n   * Determines if Windows file system is in use.\n   * \n   * @return true if the system is Windows\n   */\n  static boolean isSystemWindows() {\n    return SYSTEM_SEPARATOR == WINDOWS_SEPARATOR;\n  }\n\n  // -----------------------------------------------------------------------\n  /**\n   * Checks if the character is a separator.\n   * \n   * @param ch the character to check\n   * @return true if it is a separator character\n   */\n  private static boolean isSeparator(char ch) {\n    return (ch == UNIX_SEPARATOR) || (ch == WINDOWS_SEPARATOR);\n  }\n\n  // -----------------------------------------------------------------------\n  /**\n   * Returns the length of the filename prefix, such as <code>C:/</code> or <code>~/</code>.\n   * <p>\n   * This method will handle a file in either Unix or Windows format.\n   * <p>\n   * The prefix length includes the first slash in the full filename if applicable. Thus, it is possible that the length returned is greater than the length of the input string.\n   * \n   * <pre>\n   * Windows:\n   * a\\b\\c.txt           --&gt; \"\"          --&gt; relative\n   * \\a\\b\\c.txt          --&gt; \"\\\"         --&gt; current drive absolute\n   * C:a\\b\\c.txt         --&gt; \"C:\"        --&gt; drive relative\n   * C:\\a\\b\\c.txt        --&gt; \"C:\\\"       --&gt; absolute\n   * \\\\server\\a\\b\\c.txt  --&gt; \"\\\\server\\\" --&gt; UNC\n   * \n   * Unix:\n   * a/b/c.txt           --&gt; \"\"          --&gt; relative\n   * /a/b/c.txt          --&gt; \"/\"         --&gt; absolute\n   * ~/a/b/c.txt         --&gt; \"~/\"        --&gt; current user\n   * ~                   --&gt; \"~/\"        --&gt; current user (slash added)\n   * ~user/a/b/c.txt     --&gt; \"~user/\"    --&gt; named user\n   * ~user               --&gt; \"~user/\"    --&gt; named user (slash added)\n   * </pre>\n   * <p>\n   * The output will be the same irrespective of the machine that the code is running on. ie. both Unix and Windows prefixes are matched regardless.\n   *\n   * @param filename the filename to find the prefix in, null returns -1\n   * @return the length of the prefix, -1 if invalid or null\n   */\n  public static int getPrefixLength(String filename) {\n    if (filename == null) {\n      return -1;\n    }\n    int len = filename.length();\n    if (len == 0) {\n      return 0;\n    }\n    char ch0 = filename.charAt(0);\n    if (ch0 == ':') {\n      return -1;\n    }\n    if (len == 1) {\n      if (ch0 == '~') {\n        return 2; // return a length greater than the input\n      }\n      return (isSeparator(ch0) ? 1 : 0);\n    }\n    else {\n      if (ch0 == '~') {\n        int posUnix = filename.indexOf(UNIX_SEPARATOR, 1);\n        int posWin = filename.indexOf(WINDOWS_SEPARATOR, 1);\n        if (posUnix == -1 && posWin == -1) {\n          return len + 1; // return a length greater than the input\n        }\n        posUnix = (posUnix == -1 ? posWin : posUnix);\n        posWin = (posWin == -1 ? posUnix : posWin);\n        return Math.min(posUnix, posWin) + 1;\n      }\n      char ch1 = filename.charAt(1);\n      if (ch1 == ':') {\n        ch0 = Character.toUpperCase(ch0);\n        if (ch0 >= 'A' && ch0 <= 'Z') {\n          if (len == 2 || isSeparator(filename.charAt(2)) == false) {\n            return 2;\n          }\n          return 3;\n        }\n        return -1;\n\n      }\n      else if (isSeparator(ch0) && isSeparator(ch1)) {\n        int posUnix = filename.indexOf(UNIX_SEPARATOR, 2);\n        int posWin = filename.indexOf(WINDOWS_SEPARATOR, 2);\n        if ((posUnix == -1 && posWin == -1) || posUnix == 2 || posWin == 2) {\n          return -1;\n        }\n        posUnix = (posUnix == -1 ? posWin : posUnix);\n        posWin = (posWin == -1 ? posUnix : posWin);\n        return Math.min(posUnix, posWin) + 1;\n      }\n      else {\n        return (isSeparator(ch0) ? 1 : 0);\n      }\n    }\n  }\n}\n",
  "src_before": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n * \n *      http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.zeroturnaround.zip.commons;\n\nimport java.io.File;\n\n/**\n * This is a class that has been made significantly smaller (deleted a bunch of methods) and originally\n * is from the Apache commons-io package. All license and other documentation is intact.\n * \n * General filename and filepath manipulation utilities.\n * <p>\n * When dealing with filenames you can hit problems when moving from a Windows based development machine to a Unix based production machine. This class aims to help avoid those\n * problems.\n * <p>\n * <b>NOTE</b>: You may be able to avoid using this class entirely simply by using JDK {@link java.io.File File} objects and the two argument constructor\n * {@link java.io.File#File(java.io.File, java.lang.String) File(File,String)}.\n * <p>\n * Most methods on this class are designed to work the same on both Unix and Windows. Those that don't include 'System', 'Unix' or 'Windows' in their name.\n * <p>\n * Most methods recognise both separators (forward and back), and both sets of prefixes. See the javadoc of each method for details.\n * <p>\n * This class defines six components within a filename (example C:\\dev\\project\\file.txt):\n * <ul>\n * <li>the prefix - C:\\</li>\n * <li>the path - dev\\project\\</li>\n * <li>the full path - C:\\dev\\project\\</li>\n * <li>the name - file.txt</li>\n * <li>the base name - file</li>\n * <li>the extension - txt</li>\n * </ul>\n * Note that this class works best if directory filenames end with a separator. If you omit the last separator, it is impossible to determine if the filename corresponds to a file\n * or a directory. As a result, we have chosen to say it corresponds to a file.\n * <p>\n * This class only supports Unix and Windows style names. Prefixes are matched as follows:\n * \n * <pre>\n * Windows:\n * a\\b\\c.txt           --&gt; \"\"          --&gt; relative\n * \\a\\b\\c.txt          --&gt; \"\\\"         --&gt; current drive absolute\n * C:a\\b\\c.txt         --&gt; \"C:\"        --&gt; drive relative\n * C:\\a\\b\\c.txt        --&gt; \"C:\\\"       --&gt; absolute\n * \\\\server\\a\\b\\c.txt  --&gt; \"\\\\server\\\" --&gt; UNC\n * \n * Unix:\n * a/b/c.txt           --&gt; \"\"          --&gt; relative\n * /a/b/c.txt          --&gt; \"/\"         --&gt; absolute\n * ~/a/b/c.txt         --&gt; \"~/\"        --&gt; current user\n * ~                   --&gt; \"~/\"        --&gt; current user (slash added)\n * ~user/a/b/c.txt     --&gt; \"~user/\"    --&gt; named user\n * ~user               --&gt; \"~user/\"    --&gt; named user (slash added)\n * </pre>\n * \n * Both prefix styles are matched always, irrespective of the machine that you are currently running on.\n * <p>\n * Origin of code: Excalibur, Alexandria, Tomcat, Commons-Utils.\n *\n * @author <a href=\"mailto:burton@relativity.yi.org\">Kevin A. Burton</A>\n * @author <a href=\"mailto:sanders@apache.org\">Scott Sanders</a>\n * @author <a href=\"mailto:dlr@finemaltcoding.com\">Daniel Rall</a>\n * @author <a href=\"mailto:Christoph.Reck@dlr.de\">Christoph.Reck</a>\n * @author <a href=\"mailto:peter@apache.org\">Peter Donald</a>\n * @author <a href=\"mailto:jefft@apache.org\">Jeff Turner</a>\n * @author Matthew Hawthorne\n * @author Martin Cooper\n * @author <a href=\"mailto:jeremias@apache.org\">Jeremias Maerki</a>\n * @author Stephen Colebourne\n * @version $Id: FilenameUtils.java 609870 2008-01-08 04:46:26Z niallp $\n * @since Commons IO 1.1\n */\npublic class FilenameUtils {\n\n  /**\n   * The extension separator character.\n   * \n   * @since Commons IO 1.4\n   */\n  public static final char EXTENSION_SEPARATOR = '.';\n\n  /**\n   * The extension separator String.\n   * \n   * @since Commons IO 1.4\n   */\n  public static final String EXTENSION_SEPARATOR_STR = (new Character(EXTENSION_SEPARATOR)).toString();\n\n  /**\n   * The Unix separator character.\n   */\n  private static final char UNIX_SEPARATOR = '/';\n\n  /**\n   * The Windows separator character.\n   */\n  private static final char WINDOWS_SEPARATOR = '\\\\';\n\n  /**\n   * The system separator character.\n   */\n  private static final char SYSTEM_SEPARATOR = File.separatorChar;\n\n  /**\n   * Instances should NOT be constructed in standard programming.\n   */\n  public FilenameUtils() {\n    super();\n  }\n\n  // -----------------------------------------------------------------------\n  /**\n   * Determines if Windows file system is in use.\n   * \n   * @return true if the system is Windows\n   */\n  static boolean isSystemWindows() {\n    return SYSTEM_SEPARATOR == WINDOWS_SEPARATOR;\n  }\n\n  // -----------------------------------------------------------------------\n  /**\n   * Checks if the character is a separator.\n   * \n   * @param ch the character to check\n   * @return true if it is a separator character\n   */\n  private static boolean isSeparator(char ch) {\n    return (ch == UNIX_SEPARATOR) || (ch == WINDOWS_SEPARATOR);\n  }\n\n  // -----------------------------------------------------------------------\n  /**\n   * Returns the length of the filename prefix, such as <code>C:/</code> or <code>~/</code>.\n   * <p>\n   * This method will handle a file in either Unix or Windows format.\n   * <p>\n   * The prefix length includes the first slash in the full filename if applicable. Thus, it is possible that the length returned is greater than the length of the input string.\n   * \n   * <pre>\n   * Windows:\n   * a\\b\\c.txt           --&gt; \"\"          --&gt; relative\n   * \\a\\b\\c.txt          --&gt; \"\\\"         --&gt; current drive absolute\n   * C:a\\b\\c.txt         --&gt; \"C:\"        --&gt; drive relative\n   * C:\\a\\b\\c.txt        --&gt; \"C:\\\"       --&gt; absolute\n   * \\\\server\\a\\b\\c.txt  --&gt; \"\\\\server\\\" --&gt; UNC\n   * \n   * Unix:\n   * a/b/c.txt           --&gt; \"\"          --&gt; relative\n   * /a/b/c.txt          --&gt; \"/\"         --&gt; absolute\n   * ~/a/b/c.txt         --&gt; \"~/\"        --&gt; current user\n   * ~                   --&gt; \"~/\"        --&gt; current user (slash added)\n   * ~user/a/b/c.txt     --&gt; \"~user/\"    --&gt; named user\n   * ~user               --&gt; \"~user/\"    --&gt; named user (slash added)\n   * </pre>\n   * <p>\n   * The output will be the same irrespective of the machine that the code is running on. ie. both Unix and Windows prefixes are matched regardless.\n   *\n   * @param filename the filename to find the prefix in, null returns -1\n   * @return the length of the prefix, -1 if invalid or null\n   */\n  public static int getPrefixLength(String filename) {\n    if (filename == null) {\n      return -1;\n    }\n    int len = filename.length();\n    if (len == 0) {\n      return 0;\n    }\n    char ch0 = filename.charAt(0);\n    if (ch0 == ':') {\n      return -1;\n    }\n    if (len == 1) {\n      if (ch0 == '~') {\n        return 2; // return a length greater than the input\n      }\n      return (isSeparator(ch0) ? 1 : 0);\n    }\n    else {\n      if (ch0 == '~') {\n        int posUnix = filename.indexOf(UNIX_SEPARATOR, 1);\n        int posWin = filename.indexOf(WINDOWS_SEPARATOR, 1);\n        if (posUnix == -1 && posWin == -1) {\n          return len + 1; // return a length greater than the input\n        }\n        posUnix = (posUnix == -1 ? posWin : posUnix);\n        posWin = (posWin == -1 ? posUnix : posWin);\n        return Math.min(posUnix, posWin) + 1;\n      }\n      char ch1 = filename.charAt(1);\n      if (ch1 == ':') {\n        ch0 = Character.toUpperCase(ch0);\n        if (ch0 >= 'A' && ch0 <= 'Z') {\n          if (len == 2 || isSeparator(filename.charAt(2)) == false) {\n            return 2;\n          }\n          return 3;\n        }\n        return -1;\n\n      }\n      else if (isSeparator(ch0) && isSeparator(ch1)) {\n        int posUnix = filename.indexOf(UNIX_SEPARATOR, 2);\n        int posWin = filename.indexOf(WINDOWS_SEPARATOR, 2);\n        if ((posUnix == -1 && posWin == -1) || posUnix == 2 || posWin == 2) {\n          return -1;\n        }\n        posUnix = (posUnix == -1 ? posWin : posUnix);\n        posWin = (posWin == -1 ? posUnix : posWin);\n        return Math.min(posUnix, posWin) + 1;\n      }\n      else {\n        return (isSeparator(ch0) ? 1 : 0);\n      }\n    }\n  }\n}\n"
}