{
  "script": [
    [
      "add",
      {
        "col": 33,
        "line": 115,
        "offset": 3612
      },
      {
        "col": 48,
        "line": 115,
        "offset": 3627
      }
    ],
    [
      "add",
      {
        "col": 9,
        "line": 112,
        "offset": 3541
      },
      {
        "col": 16,
        "line": 112,
        "offset": 3548
      }
    ],
    [
      "add",
      {
        "col": 39,
        "line": 107,
        "offset": 3441
      },
      {
        "col": 43,
        "line": 107,
        "offset": 3445
      }
    ],
    [
      "add",
      {
        "col": 22,
        "line": 88,
        "offset": 2883
      },
      {
        "col": 26,
        "line": 88,
        "offset": 2887
      }
    ],
    [
      "add",
      {
        "col": 64,
        "line": 91,
        "offset": 2989
      },
      {
        "col": 68,
        "line": 91,
        "offset": 2993
      }
    ],
    [
      "add",
      {
        "col": 18,
        "line": 84,
        "offset": 2714
      },
      {
        "col": 24,
        "line": 84,
        "offset": 2720
      }
    ],
    [
      "add",
      {
        "col": 23,
        "line": 115,
        "offset": 3602
      },
      {
        "col": 26,
        "line": 115,
        "offset": 3605
      }
    ],
    [
      "add",
      {
        "col": 73,
        "line": 316,
        "offset": 11481
      },
      {
        "col": 80,
        "line": 316,
        "offset": 11488
      }
    ],
    [
      "add",
      {
        "col": 7,
        "line": 315,
        "offset": 11298
      },
      {
        "col": 17,
        "line": 315,
        "offset": 11308
      }
    ],
    [
      "add",
      {
        "col": 21,
        "line": 118,
        "offset": 3738
      },
      {
        "col": 27,
        "line": 118,
        "offset": 3744
      }
    ],
    [
      "add",
      {
        "col": 3,
        "line": 62,
        "offset": 1992
      },
      {
        "col": 4,
        "line": 96,
        "offset": 3068
      }
    ],
    [
      "add",
      {
        "col": 29,
        "line": 100,
        "offset": 3198
      },
      {
        "col": 34,
        "line": 100,
        "offset": 3203
      }
    ],
    [
      "add",
      {
        "col": 7,
        "line": 158,
        "offset": 4882
      },
      {
        "col": 16,
        "line": 158,
        "offset": 4891
      }
    ],
    [
      "add",
      {
        "col": 31,
        "line": 260,
        "offset": 8957
      },
      {
        "col": 32,
        "line": 260,
        "offset": 8958
      }
    ],
    [
      "add",
      {
        "col": 12,
        "line": 81,
        "offset": 2571
      },
      {
        "col": 22,
        "line": 81,
        "offset": 2581
      }
    ],
    [
      "add",
      {
        "col": 17,
        "line": 158,
        "offset": 4892
      },
      {
        "col": 30,
        "line": 158,
        "offset": 4905
      }
    ],
    [
      "add",
      {
        "col": 31,
        "line": 117,
        "offset": 3693
      },
      {
        "col": 42,
        "line": 117,
        "offset": 3704
      }
    ],
    [
      "add",
      {
        "col": 1,
        "line": 20,
        "offset": 807
      },
      {
        "col": 27,
        "line": 20,
        "offset": 833
      }
    ],
    [
      "add",
      {
        "col": 3,
        "line": 305,
        "offset": 10722
      },
      {
        "col": 9,
        "line": 305,
        "offset": 10728
      }
    ],
    [
      "add",
      {
        "col": 22,
        "line": 308,
        "offset": 10873
      },
      {
        "col": 36,
        "line": 308,
        "offset": 10887
      }
    ],
    [
      "add",
      {
        "col": 7,
        "line": 105,
        "offset": 3318
      },
      {
        "col": 22,
        "line": 105,
        "offset": 3333
      }
    ],
    [
      "add",
      {
        "col": 19,
        "line": 108,
        "offset": 3468
      },
      {
        "col": 27,
        "line": 108,
        "offset": 3476
      }
    ],
    [
      "add",
      {
        "col": 18,
        "line": 100,
        "offset": 3187
      },
      {
        "col": 26,
        "line": 100,
        "offset": 3195
      }
    ],
    [
      "add",
      {
        "col": 27,
        "line": 28,
        "offset": 1040
      },
      {
        "col": 29,
        "line": 28,
        "offset": 1042
      }
    ],
    [
      "add",
      {
        "col": 9,
        "line": 107,
        "offset": 3411
      },
      {
        "col": 12,
        "line": 107,
        "offset": 3414
      }
    ],
    [
      "add",
      {
        "col": 9,
        "line": 109,
        "offset": 3488
      },
      {
        "col": 12,
        "line": 109,
        "offset": 3491
      }
    ],
    [
      "add",
      {
        "col": 55,
        "line": 83,
        "offset": 2683
      },
      {
        "col": 65,
        "line": 83,
        "offset": 2693
      }
    ],
    [
      "add",
      {
        "col": 48,
        "line": 117,
        "offset": 3710
      },
      {
        "col": 52,
        "line": 117,
        "offset": 3714
      }
    ],
    [
      "add",
      {
        "col": 11,
        "line": 100,
        "offset": 3180
      },
      {
        "col": 15,
        "line": 100,
        "offset": 3184
      }
    ],
    [
      "add",
      {
        "col": 30,
        "line": 112,
        "offset": 3562
      },
      {
        "col": 33,
        "line": 112,
        "offset": 3565
      }
    ],
    [
      "add",
      {
        "col": 28,
        "line": 168,
        "offset": 5273
      },
      {
        "col": 32,
        "line": 168,
        "offset": 5277
      }
    ],
    [
      "add",
      {
        "col": 7,
        "line": 115,
        "offset": 3586
      },
      {
        "col": 22,
        "line": 115,
        "offset": 3601
      }
    ],
    [
      "add",
      {
        "col": 61,
        "line": 86,
        "offset": 2792
      },
      {
        "col": 76,
        "line": 86,
        "offset": 2807
      }
    ],
    [
      "add",
      {
        "col": 8,
        "line": 22,
        "offset": 871
      },
      {
        "col": 12,
        "line": 22,
        "offset": 875
      }
    ],
    [
      "add",
      {
        "col": 18,
        "line": 88,
        "offset": 2879
      },
      {
        "col": 21,
        "line": 88,
        "offset": 2882
      }
    ],
    [
      "add",
      {
        "col": 77,
        "line": 86,
        "offset": 2808
      },
      {
        "col": 87,
        "line": 86,
        "offset": 2818
      }
    ],
    [
      "add",
      {
        "col": 7,
        "line": 88,
        "offset": 2868
      },
      {
        "col": 10,
        "line": 88,
        "offset": 2871
      }
    ],
    [
      "add",
      {
        "col": 10,
        "line": 163,
        "offset": 4989
      },
      {
        "col": 14,
        "line": 163,
        "offset": 4993
      }
    ],
    [
      "add",
      {
        "col": 13,
        "line": 108,
        "offset": 3462
      },
      {
        "col": 18,
        "line": 108,
        "offset": 3467
      }
    ],
    [
      "add",
      {
        "col": 11,
        "line": 88,
        "offset": 2872
      },
      {
        "col": 15,
        "line": 88,
        "offset": 2876
      }
    ],
    [
      "add",
      {
        "col": 5,
        "line": 308,
        "offset": 10856
      },
      {
        "col": 9,
        "line": 308,
        "offset": 10860
      }
    ],
    [
      "add",
      {
        "col": 35,
        "line": 100,
        "offset": 3204
      },
      {
        "col": 43,
        "line": 100,
        "offset": 3212
      }
    ],
    [
      "add",
      {
        "col": 1,
        "line": 16,
        "offset": 681
      },
      {
        "col": 36,
        "line": 16,
        "offset": 716
      }
    ],
    [
      "add",
      {
        "col": 5,
        "line": 100,
        "offset": 3174
      },
      {
        "col": 10,
        "line": 100,
        "offset": 3179
      }
    ],
    [
      "add",
      {
        "col": 10,
        "line": 305,
        "offset": 10729
      },
      {
        "col": 14,
        "line": 305,
        "offset": 10733
      }
    ],
    [
      "add",
      {
        "col": 37,
        "line": 86,
        "offset": 2768
      },
      {
        "col": 56,
        "line": 86,
        "offset": 2787
      }
    ],
    [
      "add",
      {
        "col": 17,
        "line": 308,
        "offset": 10868
      },
      {
        "col": 21,
        "line": 308,
        "offset": 10872
      }
    ],
    [
      "add",
      {
        "col": 20,
        "line": 306,
        "offset": 10792
      },
      {
        "col": 24,
        "line": 306,
        "offset": 10796
      }
    ],
    [
      "add",
      {
        "col": 59,
        "line": 155,
        "offset": 4842
      },
      {
        "col": 60,
        "line": 155,
        "offset": 4843
      }
    ],
    [
      "add",
      {
        "col": 14,
        "line": 117,
        "offset": 3676
      },
      {
        "col": 20,
        "line": 117,
        "offset": 3682
      }
    ],
    [
      "add",
      {
        "col": 23,
        "line": 105,
        "offset": 3334
      },
      {
        "col": 26,
        "line": 105,
        "offset": 3337
      }
    ],
    [
      "add",
      {
        "col": 31,
        "line": 119,
        "offset": 3778
      },
      {
        "col": 39,
        "line": 119,
        "offset": 3786
      }
    ],
    [
      "add",
      {
        "col": 22,
        "line": 188,
        "offset": 6326
      },
      {
        "col": 36,
        "line": 188,
        "offset": 6340
      }
    ],
    [
      "add",
      {
        "col": 17,
        "line": 112,
        "offset": 3549
      },
      {
        "col": 29,
        "line": 112,
        "offset": 3561
      }
    ],
    [
      "add",
      {
        "col": 15,
        "line": 83,
        "offset": 2643
      },
      {
        "col": 21,
        "line": 83,
        "offset": 2649
      }
    ],
    [
      "add",
      {
        "col": 70,
        "line": 105,
        "offset": 3381
      },
      {
        "col": 74,
        "line": 105,
        "offset": 3385
      }
    ],
    [
      "add",
      {
        "col": 25,
        "line": 99,
        "offset": 3162
      },
      {
        "col": 30,
        "line": 99,
        "offset": 3167
      }
    ],
    [
      "add",
      {
        "col": 17,
        "line": 188,
        "offset": 6321
      },
      {
        "col": 21,
        "line": 188,
        "offset": 6325
      }
    ],
    [
      "add",
      {
        "col": 5,
        "line": 212,
        "offset": 7397
      },
      {
        "col": 17,
        "line": 212,
        "offset": 7409
      }
    ],
    [
      "add",
      {
        "col": 7,
        "line": 83,
        "offset": 2635
      },
      {
        "col": 14,
        "line": 83,
        "offset": 2642
      }
    ],
    [
      "add",
      {
        "col": 24,
        "line": 119,
        "offset": 3771
      },
      {
        "col": 30,
        "line": 119,
        "offset": 3777
      }
    ],
    [
      "add",
      {
        "col": 53,
        "line": 105,
        "offset": 3364
      },
      {
        "col": 69,
        "line": 105,
        "offset": 3380
      }
    ],
    [
      "add",
      {
        "col": 18,
        "line": 99,
        "offset": 3155
      },
      {
        "col": 22,
        "line": 99,
        "offset": 3159
      }
    ],
    [
      "add",
      {
        "col": 38,
        "line": 310,
        "offset": 10952
      },
      {
        "col": 44,
        "line": 310,
        "offset": 10958
      }
    ],
    [
      "add",
      {
        "col": 13,
        "line": 107,
        "offset": 3415
      },
      {
        "col": 25,
        "line": 107,
        "offset": 3427
      }
    ],
    [
      "add",
      {
        "col": 28,
        "line": 166,
        "offset": 5106
      },
      {
        "col": 32,
        "line": 166,
        "offset": 5110
      }
    ],
    [
      "add",
      {
        "col": 11,
        "line": 89,
        "offset": 2908
      },
      {
        "col": 16,
        "line": 89,
        "offset": 2913
      }
    ],
    [
      "add",
      {
        "col": 11,
        "line": 99,
        "offset": 3148
      },
      {
        "col": 17,
        "line": 99,
        "offset": 3154
      }
    ],
    [
      "add",
      {
        "col": 27,
        "line": 87,
        "offset": 2849
      },
      {
        "col": 31,
        "line": 87,
        "offset": 2853
      }
    ],
    [
      "add",
      {
        "col": 15,
        "line": 62,
        "offset": 2004
      },
      {
        "col": 46,
        "line": 62,
        "offset": 2035
      }
    ],
    [
      "add",
      {
        "col": 27,
        "line": 86,
        "offset": 2758
      },
      {
        "col": 30,
        "line": 86,
        "offset": 2761
      }
    ],
    [
      "add",
      {
        "col": 13,
        "line": 20,
        "offset": 819
      },
      {
        "col": 15,
        "line": 20,
        "offset": 821
      }
    ],
    [
      "add",
      {
        "col": 7,
        "line": 117,
        "offset": 3669
      },
      {
        "col": 11,
        "line": 117,
        "offset": 3673
      }
    ],
    [
      "add",
      {
        "col": 5,
        "line": 251,
        "offset": 8580
      },
      {
        "col": 27,
        "line": 251,
        "offset": 8602
      }
    ],
    [
      "add",
      {
        "col": 13,
        "line": 109,
        "offset": 3492
      },
      {
        "col": 23,
        "line": 109,
        "offset": 3502
      }
    ],
    [
      "add",
      {
        "col": 7,
        "line": 89,
        "offset": 2904
      },
      {
        "col": 10,
        "line": 89,
        "offset": 2907
      }
    ],
    [
      "add",
      {
        "col": 43,
        "line": 117,
        "offset": 3705
      },
      {
        "col": 46,
        "line": 117,
        "offset": 3708
      }
    ],
    [
      "add",
      {
        "col": 9,
        "line": 108,
        "offset": 3458
      },
      {
        "col": 12,
        "line": 108,
        "offset": 3461
      }
    ],
    [
      "add",
      {
        "col": 16,
        "line": 16,
        "offset": 696
      },
      {
        "col": 35,
        "line": 16,
        "offset": 715
      }
    ],
    [
      "add",
      {
        "col": 16,
        "line": 20,
        "offset": 822
      },
      {
        "col": 26,
        "line": 20,
        "offset": 832
      }
    ],
    [
      "add",
      {
        "col": 7,
        "line": 86,
        "offset": 2738
      },
      {
        "col": 26,
        "line": 86,
        "offset": 2757
      }
    ],
    [
      "add",
      {
        "col": 45,
        "line": 81,
        "offset": 2604
      },
      {
        "col": 58,
        "line": 81,
        "offset": 2617
      }
    ],
    [
      "add",
      {
        "col": 37,
        "line": 308,
        "offset": 10888
      },
      {
        "col": 43,
        "line": 308,
        "offset": 10894
      }
    ],
    [
      "add",
      {
        "col": 33,
        "line": 105,
        "offset": 3344
      },
      {
        "col": 48,
        "line": 105,
        "offset": 3359
      }
    ],
    [
      "add",
      {
        "col": 39,
        "line": 305,
        "offset": 10758
      },
      {
        "col": 50,
        "line": 305,
        "offset": 10769
      }
    ],
    [
      "add",
      {
        "col": 30,
        "line": 107,
        "offset": 3432
      },
      {
        "col": 38,
        "line": 107,
        "offset": 3440
      }
    ],
    [
      "add",
      {
        "col": 8,
        "line": 23,
        "offset": 903
      },
      {
        "col": 12,
        "line": 23,
        "offset": 907
      }
    ],
    [
      "add",
      {
        "col": 5,
        "line": 99,
        "offset": 3142
      },
      {
        "col": 10,
        "line": 99,
        "offset": 3147
      }
    ],
    [
      "add",
      {
        "col": 53,
        "line": 119,
        "offset": 3800
      },
      {
        "col": 59,
        "line": 119,
        "offset": 3806
      }
    ],
    [
      "modify",
      {
        "after": [
          {
            "col": 1,
            "line": 33,
            "offset": 1187
          },
          {
            "col": 2,
            "line": 323,
            "offset": 11600
          }
        ],
        "before": [
          {
            "col": 1,
            "line": 31,
            "offset": 1122
          },
          {
            "col": 2,
            "line": 285,
            "offset": 10451
          }
        ]
      }
    ]
  ],
  "src_after": "/**\n *    Copyright (C) 2012 ZeroTurnaround LLC <support@zeroturnaround.com>\n *\n *    Licensed under the Apache License, Version 2.0 (the \"License\");\n *    you may not use this file except in compliance with the License.\n *    You may obtain a copy of the License at\n *\n *        http://www.apache.org/licenses/LICENSE-2.0\n *\n *    Unless required by applicable law or agreed to in writing, software\n *    distributed under the License is distributed on an \"AS IS\" BASIS,\n *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *    See the License for the specific language governing permissions and\n *    limitations under the License.\n */\nimport java.io.BufferedInputStream;\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.util.zip.ZipEntry;\nimport java.util.zip.ZipOutputStream;\n\nimport junit.framework.TestCase;\n\nimport org.apache.commons.io.FileUtils;\nimport org.apache.commons.io.IOUtils;\nimport org.zeroturnaround.zip.ZipEntrySource;\nimport org.zeroturnaround.zip.ZipException;\nimport org.zeroturnaround.zip.ZipUtil;\n\npublic class ZipUtilTest extends TestCase {\n\n  public void testUnpackEntryFromFile() throws IOException {\n    final String name = \"foo\";\n    final byte[] contents = \"bar\".getBytes();\n\n    File file = File.createTempFile(\"temp\", null);\n    try {\n      // Create the ZIP file\n      ZipOutputStream zos = new ZipOutputStream(new FileOutputStream(file));\n      try {\n        zos.putNextEntry(new ZipEntry(name));\n        zos.write(contents);\n        zos.closeEntry();\n      }\n      finally {\n        IOUtils.closeQuietly(zos);\n      }\n\n      // Test the ZipUtil\n      byte[] actual = ZipUtil.unpackEntry(file, name);\n      assertNotNull(actual);\n      assertEquals(new String(contents), new String(actual));\n    }\n    finally {\n      FileUtils.deleteQuietly(file);\n    }\n  }\n  \n  public void testUnpackEntryFromStreamToFile() throws IOException {\n    final String name = \"foo\";\n    final byte[] contents = \"bar\".getBytes();\n\n    File file = File.createTempFile(\"temp\", null);\n    try {\n      // Create the ZIP file\n      ZipOutputStream zos = new ZipOutputStream(new FileOutputStream(file));\n      try {\n        zos.putNextEntry(new ZipEntry(name));\n        zos.write(contents);\n        zos.closeEntry();\n      }\n      finally {\n        IOUtils.closeQuietly(zos);\n      }\n\n      FileInputStream fis = new FileInputStream(file);\n\n      File outputFile = File.createTempFile(\"temp-output\", null);\n\n      boolean result = ZipUtil.unpackEntry(fis, name, outputFile);\n      assertTrue(result);\n      \n      BufferedInputStream bis = new BufferedInputStream(new FileInputStream(outputFile));\n      byte[] actual = new byte[1024];\n      int read = bis.read(actual);\n      bis.close();\n      \n      assertEquals(new String(contents), new String(actual, 0, read));\n    }\n    finally {\n      FileUtils.deleteQuietly(file);\n    }\n  }\n  \n  public void testUnpackEntryFromStream() throws IOException {\n    final String name = \"foo\";\n    final byte[] contents = \"bar\".getBytes();\n\n    File file = File.createTempFile(\"temp\", null);\n    try {\n      // Create the ZIP file\n      ZipOutputStream zos = new ZipOutputStream(new FileOutputStream(file));\n      try {\n        zos.putNextEntry(new ZipEntry(name));\n        zos.write(contents);\n        zos.closeEntry();\n      }\n      finally {\n        IOUtils.closeQuietly(zos);\n      }\n\n      FileInputStream fis = new FileInputStream(file);\n      // Test the ZipUtil\n      byte[] actual = ZipUtil.unpackEntry(fis, name);\n      assertNotNull(actual);\n      assertEquals(new String(contents), new String(actual));\n    }\n    finally {\n      FileUtils.deleteQuietly(file);\n    }\n  }\n\n  public void testDuplicateEntryAtAdd() throws IOException {\n    File src = new File(getClass().getResource(\"duplicate.zip\").getPath());\n\n    File dest = File.createTempFile(\"temp\", null);\n    try {\n      ZipUtil.addEntries(src, new ZipEntrySource[0], dest);\n    }\n    finally {\n      FileUtils.deleteQuietly(dest);\n    }\n  }\n\n  public void testDuplicateEntryAtReplace() throws IOException {\n    File src = new File(getClass().getResource(\"duplicate.zip\").getPath());\n\n    File dest = File.createTempFile(\"temp\", null);\n    try {\n      ZipUtil.replaceEntries(src, new ZipEntrySource[0], dest);\n    }\n    finally {\n      FileUtils.deleteQuietly(dest);\n    }\n  }\n\n  public void testDuplicateEntryAtAddOrReplace() throws IOException {\n    File src = new File(getClass().getResource(\"duplicate.zip\").getPath());\n\n    File dest = File.createTempFile(\"temp\", null);\n    try {\n      ZipUtil.addOrReplaceEntries(src, new ZipEntrySource[0], dest);\n    }\n    finally {\n      FileUtils.deleteQuietly(dest);\n    }\n  }\n\n  public void testUnexplode() throws IOException {\n    File file = File.createTempFile(\"tempFile\", null);\n    File tmpDir = file.getParentFile();\n\n    unexplodeWithException(file, \"shouldn't be able to unexplode file that is not a directory\");\n    assertTrue(\"Should be able to delete tmp file\", file.delete());\n    unexplodeWithException(file, \"shouldn't be able to unexplode file that doesn't exist\");\n\n    // create empty tmp dir with the same name as deleted file\n    File dir = new File(tmpDir, file.getName());\n    dir.deleteOnExit();\n    assertTrue(\"Should be able to create directory with the same name as there was tmp file\", dir.mkdir());\n\n    unexplodeWithException(dir, \"shouldn't be able to unexplode dir that doesn't contain any files\");\n\n    // unexplode should succeed with at least one file in directory\n    File.createTempFile(\"temp\", null, dir);\n    ZipUtil.unexplode(dir);\n\n    assertTrue(\"zip file should exist with the same name as the directory that was unexploded\", dir.exists());\n    assertTrue(\"unexploding input directory should have produced zip file with the same name\", !dir.isDirectory());\n    assertTrue(\"Should be able to delete zip that was created from directory\", dir.delete());\n  }\n\n  public void testPackEntry() throws Exception {\n    File fileToPack = new File(getClass().getResource(\"TestFile.txt\").getPath());\n    File dest = File.createTempFile(\"temp\", null);\n    ZipUtil.packEntry(fileToPack, dest);\n    assertTrue(dest.exists());\n\n    ZipUtil.explode(dest);\n    assertTrue((new File(dest, \"TestFile.txt\")).exists());\n    // if fails then maybe somebody changed the file contents and did not update\n    // the test\n    assertEquals(108, (new File(dest, \"TestFile.txt\")).length());\n  }\n\n  public void testPackEntries() throws Exception {\n    File fileToPack = new File(getClass().getResource(\"TestFile.txt\").getPath());\n    File fileToPackII = new File(getClass().getResource(\"TestFile-II.txt\").getPath());\n    File dest = File.createTempFile(\"temp\", null);\n    ZipUtil.packEntries(new File[] { fileToPack, fileToPackII }, dest);\n    assertTrue(dest.exists());\n\n    ZipUtil.explode(dest);\n    assertTrue((new File(dest, \"TestFile.txt\")).exists());\n    assertTrue((new File(dest, \"TestFile-II.txt\")).exists());\n    // if fails then maybe somebody changed the file contents and did not update\n    // the test\n    assertEquals(108, (new File(dest, \"TestFile.txt\")).length());\n    assertEquals(103, (new File(dest, \"TestFile-II.txt\")).length());\n  }\n\n  public void testZipException() {\n    boolean exceptionThrown = false;\n    try {\n      ZipUtil.pack(new File(\"nonExistent\"), new File(\"weeheha\"));\n    }\n    catch (ZipException e) {\n      exceptionThrown = true;\n    }\n    assertTrue(exceptionThrown);\n  }\n\n  public void testPreserveRoot() throws Exception {\n    File dest = File.createTempFile(\"temp\", null);\n    File parent = new File(getClass().getResource(\"TestFile.txt\").getPath()).getParentFile();\n    ZipUtil.pack(parent, dest, true);\n    ZipUtil.explode(dest);\n    assertTrue((new File(dest, parent.getName())).exists());\n  }\n\n  private void unexplodeWithException(File file, String message) {\n    boolean ok = false;\n    try {\n      ZipUtil.unexplode(file);\n    }\n    catch (Exception e) {\n      ok = true;\n    }\n    assertTrue(message, ok);\n  }\n\n  public void testArchiveEquals() {\n    File src = new File(getClass().getResource(\"demo.zip\").getPath());\n    // byte-by-byte copy\n    File src2 = new File(getClass().getResource(\"demo-copy.zip\").getPath());\n    assertTrue(ZipUtil.archiveEquals(src, src2));\n    \n    // entry by entry copy\n    File src3 = new File(getClass().getResource(\"demo-copy-II.zip\").getPath());\n    assertTrue(ZipUtil.archiveEquals(src, src3));\n  }\n  \n  public void testRepackArchive() throws IOException {\n    File src = new File(getClass().getResource(\"demo.zip\").getPath());\n    File dest = File.createTempFile(\"temp\", null);\n\n    ZipUtil.repack(src, dest, 1);\n\n    assertTrue(ZipUtil.archiveEquals(src, dest));\n  }\n\n\n  public void testContainsAnyEntry() throws IOException {\n    File src = new File(getClass().getResource(\"demo.zip\").getPath());\n    boolean exists = ZipUtil.containsAnyEntry(src, new String[] { \"foo.txt\", \"bar.txt\" });\n    assertTrue(exists);\n\n    exists = ZipUtil.containsAnyEntry(src, new String[] { \"foo.txt\", \"does-not-exist.txt\" });\n    assertTrue(exists);\n\n    exists = ZipUtil.containsAnyEntry(src, new String[] { \"does-not-exist-I.txt\", \"does-not-exist-II.txt\" });\n    assertFalse(exists);\n  }\n\n  public void testAddEntry() throws IOException {\n    File src = new File(getClass().getResource(\"demo.zip\").getPath());\n    final String fileName = \"TestFile.txt\";\n    assertFalse(ZipUtil.containsEntry(src, fileName));\n    File newEntry = new File(getClass().getResource(fileName).getPath());\n    File dest = File.createTempFile(\"temp.zip\", null);\n\n    ZipUtil.addEntry(src, fileName, newEntry, dest);\n    assertTrue(ZipUtil.containsEntry(dest, fileName));\n  }\n\n  public void testRemoveEntry() throws IOException {\n    File src = new File(getClass().getResource(\"demo.zip\").getPath());\n\n    File dest = File.createTempFile(\"temp\", null);\n    try {\n      ZipUtil.removeEntry(src, \"bar.txt\", dest);\n      assertTrue(\"Result zip misses entry 'foo.txt'\", ZipUtil.containsEntry(dest, \"foo.txt\"));\n      assertTrue(\"Result zip misses entry 'foo1.txt'\", ZipUtil.containsEntry(dest, \"foo1.txt\"));\n      assertTrue(\"Result zip misses entry 'foo2.txt'\", ZipUtil.containsEntry(dest, \"foo2.txt\"));\n      assertFalse(\"Result zip still contains 'bar.txt'\", ZipUtil.containsEntry(dest, \"bar.txt\"));\n    }\n    finally {\n      FileUtils.deleteQuietly(dest);\n    }\n  }\n\n  public void testRemoveDirs() throws IOException {\n    File src = new File(getClass().getResource(\"demo-dirs.zip\").getPath());\n\n    File dest = File.createTempFile(\"temp\", null);\n    try {\n      ZipUtil.removeEntries(src, new String[] { \"bar.txt\", \"a/b\" }, dest);\n\n      assertFalse(\"Result zip still contains 'bar.txt'\", ZipUtil.containsEntry(dest, \"bar.txt\"));\n      assertFalse(\"Result zip still contains dir 'a/b'\", ZipUtil.containsEntry(dest, \"a/b\"));\n      assertTrue(\"Result doesn't containt 'attic'\", ZipUtil.containsEntry(dest, \"attic/treasure.txt\"));\n      assertTrue(\"Entry whose prefix is dir name is removed too: 'b.txt'\", ZipUtil.containsEntry(dest, \"a/b.txt\"));\n      assertFalse(\"Entry in a removed dir is still there: 'a/b/c.txt'\", ZipUtil.containsEntry(dest, \"a/b/c.txt\"));\n\n    }\n    finally {\n      FileUtils.deleteQuietly(dest);\n    }\n  }\n}\n",
  "src_before": "/**\n *    Copyright (C) 2012 ZeroTurnaround LLC <support@zeroturnaround.com>\n *\n *    Licensed under the Apache License, Version 2.0 (the \"License\");\n *    you may not use this file except in compliance with the License.\n *    You may obtain a copy of the License at\n *\n *        http://www.apache.org/licenses/LICENSE-2.0\n *\n *    Unless required by applicable law or agreed to in writing, software\n *    distributed under the License is distributed on an \"AS IS\" BASIS,\n *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *    See the License for the specific language governing permissions and\n *    limitations under the License.\n */\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.util.zip.ZipEntry;\nimport java.util.zip.ZipOutputStream;\n\nimport junit.framework.TestCase;\n\nimport org.apache.commons.io.FileUtils;\nimport org.apache.commons.io.IOUtils;\nimport org.zeroturnaround.zip.ZipEntrySource;\nimport org.zeroturnaround.zip.ZipException;\nimport org.zeroturnaround.zip.ZipUtil;\n\npublic class ZipUtilTest extends TestCase {\n\n  public void testUnpackEntryFromFile() throws IOException {\n    final String name = \"foo\";\n    final byte[] contents = \"bar\".getBytes();\n\n    File file = File.createTempFile(\"temp\", null);\n    try {\n      // Create the ZIP file\n      ZipOutputStream zos = new ZipOutputStream(new FileOutputStream(file));\n      try {\n        zos.putNextEntry(new ZipEntry(name));\n        zos.write(contents);\n        zos.closeEntry();\n      }\n      finally {\n        IOUtils.closeQuietly(zos);\n      }\n\n      // Test the ZipUtil\n      byte[] actual = ZipUtil.unpackEntry(file, name);\n      assertNotNull(actual);\n      assertEquals(new String(contents), new String(actual));\n    }\n    finally {\n      FileUtils.deleteQuietly(file);\n    }\n  }\n  \n  public void testUnpackEntryFromStream() throws IOException {\n    final String name = \"foo\";\n    final byte[] contents = \"bar\".getBytes();\n\n    File file = File.createTempFile(\"temp\", null);\n    try {\n      // Create the ZIP file\n      ZipOutputStream zos = new ZipOutputStream(new FileOutputStream(file));\n      try {\n        zos.putNextEntry(new ZipEntry(name));\n        zos.write(contents);\n        zos.closeEntry();\n      }\n      finally {\n        IOUtils.closeQuietly(zos);\n      }\n\n      FileInputStream fis = new FileInputStream(file);\n      // Test the ZipUtil\n      byte[] actual = ZipUtil.unpackEntry(fis, name);\n      assertNotNull(actual);\n      assertEquals(new String(contents), new String(actual));\n    }\n    finally {\n      FileUtils.deleteQuietly(file);\n    }\n  }\n\n  public void testDuplicateEntryAtAdd() throws IOException {\n    File src = new File(getClass().getResource(\"duplicate.zip\").getPath());\n\n    File dest = File.createTempFile(\"temp\", null);\n    try {\n      ZipUtil.addEntries(src, new ZipEntrySource[0], dest);\n    }\n    finally {\n      FileUtils.deleteQuietly(dest);\n    }\n  }\n\n  public void testDuplicateEntryAtReplace() throws IOException {\n    File src = new File(getClass().getResource(\"duplicate.zip\").getPath());\n\n    File dest = File.createTempFile(\"temp\", null);\n    try {\n      ZipUtil.replaceEntries(src, new ZipEntrySource[0], dest);\n    }\n    finally {\n      FileUtils.deleteQuietly(dest);\n    }\n  }\n\n  public void testDuplicateEntryAtAddOrReplace() throws IOException {\n    File src = new File(getClass().getResource(\"duplicate.zip\").getPath());\n\n    File dest = File.createTempFile(\"temp\", null);\n    try {\n      ZipUtil.addOrReplaceEntries(src, new ZipEntrySource[0], dest);\n    }\n    finally {\n      FileUtils.deleteQuietly(dest);\n    }\n  }\n\n  public void testUnexplode() throws IOException {\n    File file = File.createTempFile(\"tempFile\", null);\n    File tmpDir = file.getParentFile();\n\n    unexplodeWithException(file, \"shouldn't be able to unexplode file that is not a directory\");\n    assertTrue(\"Should be able to delete tmp file\", file.delete());\n    unexplodeWithException(file, \"shouldn't be able to unexplode file that doesn't exist\");\n\n    // create empty tmp dir with the same name as deleted file\n    File dir = new File(tmpDir, file.getName());\n    dir.deleteOnExit();\n    assertTrue(\"Should be able to create directory with the same name as there was tmp file\", dir.mkdir());\n\n    unexplodeWithException(dir, \"shouldn't be able to unexplode dir that doesn't contain any files\");\n\n    // unexplode should succeed with at least one file in directory\n    File.createTempFile(\"temp\", null, dir);\n    ZipUtil.unexplode(dir);\n\n    assertTrue(\"zip file should exist with the same name as the directory that was unexploded\", dir.exists());\n    assertTrue(\"unexploding input directory should have produced zip file with the same name\", !dir.isDirectory());\n    assertTrue(\"Should be able to delete zip that was created from directory\", dir.delete());\n  }\n\n  public void testPackEntry() throws Exception {\n    File fileToPack = new File(getClass().getResource(\"TestFile.txt\").getPath());\n    File dest = File.createTempFile(\"temp\", null);\n    ZipUtil.packEntry(fileToPack, dest);\n    assertTrue(dest.exists());\n\n    ZipUtil.explode(dest);\n    assertTrue((new File(dest, \"TestFile.txt\")).exists());\n    // if fails then maybe somebody changed the file contents and did not update\n    // the test\n    assertEquals(108, (new File(dest, \"TestFile.txt\")).length());\n  }\n\n  public void testPackEntries() throws Exception {\n    File fileToPack = new File(getClass().getResource(\"TestFile.txt\").getPath());\n    File fileToPackII = new File(getClass().getResource(\"TestFile-II.txt\").getPath());\n    File dest = File.createTempFile(\"temp\", null);\n    ZipUtil.packEntries(new File[] { fileToPack, fileToPackII }, dest);\n    assertTrue(dest.exists());\n\n    ZipUtil.explode(dest);\n    assertTrue((new File(dest, \"TestFile.txt\")).exists());\n    assertTrue((new File(dest, \"TestFile-II.txt\")).exists());\n    // if fails then maybe somebody changed the file contents and did not update\n    // the test\n    assertEquals(108, (new File(dest, \"TestFile.txt\")).length());\n    assertEquals(103, (new File(dest, \"TestFile-II.txt\")).length());\n  }\n\n  public void testZipException() {\n    boolean exceptionThrown = false;\n    try {\n      ZipUtil.pack(new File(\"nonExistent\"), new File(\"weeheha\"));\n    }\n    catch (ZipException e) {\n      exceptionThrown = true;\n    }\n    assertTrue(exceptionThrown);\n  }\n\n  public void testPreserveRoot() throws Exception {\n    File dest = File.createTempFile(\"temp\", null);\n    File parent = new File(getClass().getResource(\"TestFile.txt\").getPath()).getParentFile();\n    ZipUtil.pack(parent, dest, true);\n    ZipUtil.explode(dest);\n    assertTrue((new File(dest, parent.getName())).exists());\n  }\n\n  private void unexplodeWithException(File file, String message) {\n    boolean ok = false;\n    try {\n      ZipUtil.unexplode(file);\n    }\n    catch (Exception e) {\n      ok = true;\n    }\n    assertTrue(message, ok);\n  }\n\n  public void testArchiveEquals() {\n    File src = new File(getClass().getResource(\"demo.zip\").getPath());\n    // byte-by-byte copy\n    File src2 = new File(getClass().getResource(\"demo-copy.zip\").getPath());\n    assertTrue(ZipUtil.archiveEquals(src, src2));\n    \n    // entry by entry copy\n    File src3 = new File(getClass().getResource(\"demo-copy-II.zip\").getPath());\n    assertTrue(ZipUtil.archiveEquals(src, src3));\n  }\n  \n  public void testRepackArchive() throws IOException {\n    File src = new File(getClass().getResource(\"demo.zip\").getPath());\n    File dest = File.createTempFile(\"temp\", null);\n\n    ZipUtil.repack(src, dest, 1);\n\n    assertTrue(ZipUtil.archiveEquals(src, dest));\n  }\n\n\n  public void testContainsAnyEntry() throws IOException {\n    File src = new File(getClass().getResource(\"demo.zip\").getPath());\n    boolean exists = ZipUtil.containsAnyEntry(src, new String[] { \"foo.txt\", \"bar.txt\" });\n    assertTrue(exists);\n\n    exists = ZipUtil.containsAnyEntry(src, new String[] { \"foo.txt\", \"does-not-exist.txt\" });\n    assertTrue(exists);\n\n    exists = ZipUtil.containsAnyEntry(src, new String[] { \"does-not-exist-I.txt\", \"does-not-exist-II.txt\" });\n    assertFalse(exists);\n  }\n\n  public void testAddEntry() throws IOException {\n    File src = new File(getClass().getResource(\"demo.zip\").getPath());\n    final String fileName = \"TestFile.txt\";\n    assertFalse(ZipUtil.containsEntry(src, fileName));\n    File newEntry = new File(getClass().getResource(fileName).getPath());\n    File dest = File.createTempFile(\"temp.zip\", null);\n\n    ZipUtil.addEntry(src, fileName, newEntry, dest);\n    assertTrue(ZipUtil.containsEntry(dest, fileName));\n  }\n\n  public void testRemoveEntry() throws IOException {\n    File src = new File(getClass().getResource(\"demo.zip\").getPath());\n\n    File dest = File.createTempFile(\"temp\", null);\n    try {\n      ZipUtil.removeEntry(src, \"bar.txt\", dest);\n      assertTrue(\"Result zip misses entry 'foo.txt'\", ZipUtil.containsEntry(dest, \"foo.txt\"));\n      assertTrue(\"Result zip misses entry 'foo1.txt'\", ZipUtil.containsEntry(dest, \"foo1.txt\"));\n      assertTrue(\"Result zip misses entry 'foo2.txt'\", ZipUtil.containsEntry(dest, \"foo2.txt\"));\n      assertFalse(\"Result zip still contains 'bar.txt'\", ZipUtil.containsEntry(dest, \"bar.txt\"));\n    }\n    finally {\n      FileUtils.deleteQuietly(dest);\n    }\n  }\n\n  public void testRemoveDirs() throws IOException {\n    File src = new File(getClass().getResource(\"demo-dirs.zip\").getPath());\n\n    File dest = File.createTempFile(\"temp\", null);\n    try {\n      ZipUtil.removeEntries(src, new String[] { \"bar.txt\", \"a/b\" }, dest);\n\n      assertFalse(\"Result zip still contains 'bar.txt'\", ZipUtil.containsEntry(dest, \"bar.txt\"));\n      assertFalse(\"Result zip still contains dir 'a/b'\", ZipUtil.containsEntry(dest, \"a/b\"));\n      assertTrue(\"Result doesn't containt 'attic'\", ZipUtil.containsEntry(dest, \"attic/treasure.txt\"));\n      assertTrue(\"Entry whose prefix is dir name is removed too: 'b.txt'\", ZipUtil.containsEntry(dest, \"a/b.txt\"));\n      assertFalse(\"Entry in a removed dir is still there: 'a/b/c.txt'\", ZipUtil.containsEntry(dest, \"a/b/c.txt\"));\n\n    }\n    finally {\n      FileUtils.deleteQuietly(dest);\n    }\n  }\n}\n"
}